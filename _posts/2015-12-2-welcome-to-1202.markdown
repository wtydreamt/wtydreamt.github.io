---
bg: "railss.jpg"
layout: post
title:  "PHP四种常见排序算法  !"
crawlertitle: "How to use jekyll"
summary: "PHP四种常见排序算法 ！"
date:   2015-12-2 13:00:08 +0700
categories: posts
tags: 'php'
author: redVi
---

一、冒泡排序：

    /** 
     * [bubbleSort 冒泡排序] 
     * @param  [array] $arr [待排序数组] 
     * @return [array]      [排序后数组] 
     */  
    function bubbleSort($arr)  
    {  
        //计算数组长度  
        $length = count($arr);  
        //循环次数为数组长度  
        for ($m=1; $m < $length; $m++)   
        {   
            //循环与该位置之后的数字比较  
            for ($n=0; $n < $length-$m; $n++)   
            {   
                //如果当前数字比后一个数字大  
                if($arr[$n] > $arr[$n+1])  
                {  
                    //将下一个数字写入缓存变量中  
                    $tmp = $arr[$n+1];  
                    //将当前数字(也就是较大的数字)后移一位  
                    $arr[$n+1] = $arr[$n];  
                    //将缓存的数字(也就是较小的数字)前移一位  
                    $arr[$n] = $tmp;  
                }  
            }  
        }  
        return $arr;  
    }  
      
    $arr = array(45,12,48,14,99,22,75,36);  
    print_r(bubbleSort($arr));  

二、选择排序：

    /** 
     * [selectSort 选择排序] 
     * @param  [array] $arr [待排序数组] 
     * @return [array]      [排序后数组] 
     */  
    function selectSort($arr) {  
    //实现思路 双重循环完成，外层控制轮数，当前的最小值。内层 控制的比较次数  
        //$i 当前最小值的位置， 需要参与比较的元素  
        for($i=0, $len=count($arr); $i<$len-1; $i++) {  
            //先假设最小的值的位置  
            $p = $i;  
            //$j 当前都需要和哪些元素比较，$i 后边的。  
            for($j=$i+1; $j<$len; $j++) {  
                //$arr[$p] 是 当前已知的最小值  
                if($arr[$p] > $arr[$j]) {  
                    //比较，发现更小的,记录下最小值的位置；并且在下次比较时，  
                    // 应该采用已知的最小值进行比较。  
                    $p = $j;  
                }  
            }  
            //已经确定了当前的最小值的位置，保存到$p中。  
            //如果发现 最小值的位置与当前假设的位置$i不同，则位置互换即可  
            if($p != $i) {  
                $tmp = $arr[$p];  
                $arr[$p] = $arr[$i];  
                $arr[$i] = $tmp;  
            }  
        }  
        //返回最终结果  
        return $arr;  
    }  
      
      
      
    $arr = array(45,12,48,14,99,22,75,36);  
    print_r(selectSort($arr)); 

3、插入排序： 

    /** 
     * [insertSort 插入排序] 
     * @param  [array] $arr [待排序数组] 
     * @return [array]      [排序后数组] 
     */  
    function insertSort($arr) {  
        //区分 哪部分是已经排序好的  
        //哪部分是没有排序的  
        //找到其中一个需要排序的元素  
        //这个元素 就是从第二个元素开始，到最后一个元素都是这个需要排序的元素  
        //利用循环就可以标志出来  
        //i循环控制 每次需要插入的元素，一旦需要插入的元素控制好了，  
        //间接已经将数组分成了2部分，下标小于当前的（左边的），是排序好的序列  
        for($i=1, $len=count($arr); $i<$len; $i++) {  
            //获得当前需要比较的元素值。  
            $tmp = $arr[$i];  
            //内层循环控制 比较 并 插入  
            for($j=$i-1;$j>=0;$j--) {  
                //$arr[$i];//需要插入的元素; $arr[$j];//需要比较的元素  
                if($tmp < $arr[$j]) {  
                    //发现插入的元素要小，交换位置  
                    //将后边的元素与前面的元素互换  
                    $arr[$j+1] = $arr[$j];  
                    //将前面的数设置为 当前需要交换的数  
                    $arr[$j] = $tmp;  
                } else {  
                    //如果碰到不需要移动的元素  
                    //由于是已经排序好是数组，则前面的就不需要再次比较了。  
                    break;  
                }  
            }  
        }  
        //将这个元素 插入到已经排序好的序列内。  
        //返回  
        return $arr;  
    }  
      
    $arr = array(45,12,48,14,99,22,75,36);  
    print_r(insertSort($arr));  

4、快速排序：

    /** 
     * [quickSort 快速排序] 
     * @param  [type] $arr [待排序数组] 
     * @return [type]      [排序后数组] 
     */  
    function quickSort($arr) {  
        //先判断是否需要继续进行  
        $length = count($arr);  
        if($length <= 1) {  
            return $arr;  
        }  
        //如果没有返回，说明数组内的元素个数 多余1个，需要排序  
        //选择一个标尺  
        //选择第一个元素  
        $base_num = $arr[0];  
        //遍历 除了标尺外的所有元素，按照大小关系放入两个数组内  
        //初始化两个数组  
        $left_array = array();//小于标尺的  
        $right_array = array();//大于标尺的  
        for($i=1; $i<$length; $i++) {  
            if($base_num > $arr[$i]) {  
                //放入左边数组  
                $left_array[] = $arr[$i];  
            } else {  
                //放入右边  
                $right_array[] = $arr[$i];  
            }  
        }  
        //再分别对 左边 和 右边的数组进行相同的排序处理方式  
        //递归调用这个函数,并记录结果  
        $left_array = quickSort($left_array);  
        $right_array = quickSort($right_array);  
        //合并左边 标尺 右边  
        return array_merge($left_array, array($base_num), $right_array);  
    }  
    $arr = array(45,12,48,14,99,22,75,36);  
    print_r(quickSort($arr)); 
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TingYu Wang</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>https://wtydreamt.github.io/</link>
    <atom:link href="https://wtydreamt.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 01 Nov 2016 21:21:51 +0800</pubDate>
    <lastBuildDate>Tue, 01 Nov 2016 21:21:51 +0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>如何预防sql注入!</title>
        <description>&lt;h5 id=&quot;mysql-sql&quot;&gt;关于mysql sql注入简单预防&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;msyql_real_escape_string()&lt;/code&gt;函数转义 SQL 语句中使用的字符串的特殊字符。&lt;br /&gt;
提示：可使用本函数来预防数据库攻击。&lt;br /&gt;
受影响的字符：&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
   \x00
    \n
    \r
    \ 
    &#39; 
    &quot; 
    \x1a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。&lt;br /&gt;
预定义字符是：&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    单引号（&#39;）
    双引号（&quot;）
    反斜杠（\）
    NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;提示：该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串。  &lt;br /&gt;
默认地，PHP 对所有的 GET、POST 和 COOKIE 数据自动运行 addslashes()。所以您不应对已转义过的字符串使用 addslashes()，因为这样会导致双层转义。遇到这种情况时可以使用函数 get_magic_quotes_gpc() 进行检测。&lt;br /&gt;
get_magic_quotes_gpc()函数用法介绍: &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;当magic_quotes_gpc=On的时候，函数get_magic_quotes_gpc()就会返回1&lt;/p&gt;

&lt;p&gt;当magic_quotes_gpc=Off的时候，函数get_magic_quotes_gpc()就会返回0&lt;/p&gt;

&lt;p&gt;举例说明1：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
$con = mysql_connect(&quot;localhost&quot;, &quot;hello&quot;, &quot;321&quot;);
if (!$con)
  {
  die(&#39;Could not connect: &#39; . mysql_error());
  }

// 获得用户名和密码的代码

// 转义用户名和密码，以便在 SQL 中使用
$user = mysql_real_escape_string($user);
$pwd = mysql_real_escape_string($pwd);

$sql = &quot;SELECT * FROM users WHERE
user=&#39;&quot; . $user . &quot;&#39; AND password=&#39;&quot; . $pwd . &quot;&#39;&quot;

// 更多代码

mysql_close($con);	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;举例2：
数据库攻击。本例演示如果我们不对用户名和密码应用 mysql_real_escape_string() 函数会发生什么：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
	$con = mysql_connect(&quot;localhost&quot;, &quot;hello&quot;, &quot;321&quot;);
if (!$con)
  {
  die(&#39;Could not connect: &#39; . mysql_error());
  }

$sql = &quot;SELECT * FROM users
WHERE user=&#39;{$_POST[&#39;user&#39;]}&#39;
AND password=&#39;{$_POST[&#39;pwd&#39;]}&#39;&quot;;
mysql_query($sql);

// 不检查用户名和密码
// 可以是用户输入的任何内容，比如：
$_POST[&#39;user&#39;] = &#39;john&#39;;
$_POST[&#39;pwd&#39;] = &quot;&#39; OR &#39;&#39;=&#39;&quot;;

// 一些代码...

mysql_close($con);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么 SQL 查询会成为这样:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
SELECT * FROM users
WHERE user=&#39;john&#39; AND password=&#39;&#39; OR &#39;&#39;=&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这意味着任何用户无需输入合法的密码即可登陆。&lt;br /&gt;
预防数据库攻击的正确做法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
function check_input($value)
{
// 去除斜杠
if (get_magic_quotes_gpc())
  {
  $value = stripslashes($value);
  }
// 如果不是数字则加引号
if (!is_numeric($value))
  {
  $value = &quot;&#39;&quot; . mysql_real_escape_string($value) . &quot;&#39;&quot;;
  }
return $value;
}

$con = mysql_connect(&quot;localhost&quot;, &quot;hello&quot;, &quot;321&quot;);
if (!$con)
  {
  die(&#39;Could not connect: &#39; . mysql_error());
  }

// 进行安全的 SQL
$user = check_input($_POST[&#39;user&#39;]);
$pwd = check_input($_POST[&#39;pwd&#39;]);
$sql = &quot;SELECT * FROM users WHERE
user=$user AND password=$pwd&quot;;

mysql_query($sql);

mysql_close($con);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
&lt;p&gt;本文摘自：http://www.w3school.com.cn/php/func_string_addslashes.asp&lt;/p&gt;

</description>
        <pubDate>Fri, 28 Oct 2016 17:00:47 +0800</pubDate>
        <link>https://wtydreamt.github.io/posts/welcome-to-wty1028/</link>
        <guid isPermaLink="true">https://wtydreamt.github.io/posts/welcome-to-wty1028/</guid>
        
        <category>msyql</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>jekyll github 个人博客搭建!</title>
        <description>&lt;p&gt;搭建一个jekyll github&lt;/p&gt;

&lt;h4 id=&quot;jekyll-github-githubusernamegithubiogithubhttpspagesgithubcomusernamegithubiohttpwwwliaoxuefengcomwiki0013739516305929606dd18361248578c67b8067c8c017b000jekyllwindows&quot;&gt;搭建一个jekyll github 博客首先在github上创建一个&lt;code&gt;username.github.io&lt;/code&gt;的仓库熟悉github的程序猿可以直接参考&lt;code&gt;https://pages.github.com/&lt;/code&gt;这个地址来搭建&lt;code&gt;username.github.io&lt;/code&gt;仓库如果不熟悉的可以先看&lt;code&gt;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/&lt;/code&gt;这个教程在开始上面的步骤。基本准备工作做完后就开始安装jekyll这里我是在windows下安装的安装中我们需要注意的是版本&lt;/h4&gt;
&lt;hr /&gt;
&lt;h3&gt;安装Ruby&lt;/h3&gt;
&lt;p&gt;Jekyll是一款静态网站生成工具，允许用户使用HTML、Markdown或Textile通过模块的方式建立所需网站，然后通过模板引擎Liquid（Liquid Templating Engine）来运行或者生成对应的静态网站文件.
在GitHub上使用较多，通过GitHub搭建自己的博客一般来说就是使用Jekyll；因为GitHub的渲染引擎默认为Jekyll。&lt;br /&gt;
Jekyll是一款基于Ruby的插件，安装Ruby是必须的
&lt;br /&gt;
下载ruby：&lt;a href=&quot;https://www.ruby-lang.org/zh_cn/downloads/&quot;&gt;点击下载&lt;/a&gt;
&lt;br /&gt;安装时选中“Add Ruby executables to your PATH”这样将自动完成环境变量的配置。打开cmd&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
#=&amp;gt;在cmd中输入 
ruby -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果显示ruby的版本号则安装成功&lt;/p&gt;

&lt;hr /&gt;
&lt;h3&gt;安装 jekyll&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
#=&amp;gt;在cmd中输入 
gem install jekyll
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section&quot;&gt;在这里可能会出现这样的错误&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;ERROR: Could not find a valid gem ‘jekyll’ (&amp;gt;= 0), here is why:
Unable to download data from https://rubygems.org/ - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (https://api.rubygems.org/latest_spece.4.8.gz)&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-1&quot;&gt;解决办法&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
$ gem --remove https://rubygems.org/ #移除原有镜像
$ gem sources --add http://gems.ruby-china.org/ #添加新镜像 
$ gem sources -l #查看镜像
https://gems.ruby-china.org
# 确保只有 gems.ruby-china.org
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-2&quot;&gt;接着执行&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
gem install jekyll -v &#39;3.0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;jekylljekyll&quot;&gt;jekyll版本过高可能会出错，如果已经安装了jekyll过高的版本可以用下面的命令删除后重新安装&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;
gem uninstall jekyll -a
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;blog&quot;&gt;上面准备工作做完后就可以开始做我们的博客了首先创建一个blog&lt;/h4&gt;
&lt;p&gt;打开命令行在任意位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
jekyll new blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个时候就会生成一个blog的文件夹命令行进入到blog文件夹中然后执行命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
最后输出Now browse to http://localhost:4000访问&lt;code&gt;http://localhost:4000&lt;/code&gt;这样就ok了。如果在本地运行后没问题那你就可以把它推到git上了就是上面第一步骤中的仓库里。接着就可以根据自己的爱好来搭建博客了如果还有什么疑问可以点击这里来看看:&lt;a href=&quot;http://wiki.jikexueyuan.com/project/jekyll/&quot;&gt;点我&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jun 2016 00:09:47 +0800</pubDate>
        <link>https://wtydreamt.github.io/posts/welcome-to-jekyll/</link>
        <guid isPermaLink="true">https://wtydreamt.github.io/posts/welcome-to-jekyll/</guid>
        
        <category>jekyll</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>程序猿的一天!</title>
        <description>&lt;h5 id=&quot;section&quot;&gt;只是这有霾的都市&lt;/h5&gt;

&lt;p&gt;天本已经大亮了，只是在这有霾的都市，阳光还没撒到地面就被细微的颗粒收了去，迷雾中泛着点光的色彩，透露出徒有虚表的美感。路上的车辆在雾大时还会开启双闪，以防不测，一闪一灭，好似生命的呼吸，向人们告示，雾霾并没有夺走这个城市的生命。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/beijin.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 11 Jan 2016 09:09:47 +0800</pubDate>
        <link>https://wtydreamt.github.io/posts/welcome-to-wty/</link>
        <guid isPermaLink="true">https://wtydreamt.github.io/posts/welcome-to-wty/</guid>
        
        <category>随记</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>面向对象!</title>
        <description>&lt;h4 id=&quot;section&quot;&gt;面向对象是一种计算机编程架构，比面向过程具有更强的灵活性和扩展性&lt;/h4&gt;

&lt;h5 id=&quot;oo3&quot;&gt;一、面向对象（OO）包括3部分内容：&lt;/h5&gt;

&lt;p&gt;面向对象分析（Object Oriented Analysis,OOA）&lt;/p&gt;

&lt;p&gt;面向对象设计（Object Oriented Design,OOD）&lt;/p&gt;

&lt;p&gt;面向对象编程（Object Oriented Programming,OOP）&lt;/p&gt;

&lt;h5 id=&quot;section-1&quot;&gt;二、面向对象的概念&lt;/h5&gt;

&lt;p&gt;面向对象编程（Object Oriented Programming, OOP, 面向对象程序设计）是一种计算机编程架构，OOP的一条基本原则是计算机程序是由单个能够起到子程序作用的单元或对象组合而成，OOP达到了软件工程的三个目标：重用性、灵活性和扩展性。为了实现整体运算，每个对象都能够接收信息、处理数据和向其它对象发送信息。面向对象一直是软件开发领域内比较热门的话题，首先，面向对象符合人类看待事物的一般规律。其次，采用面向对象方法可以使系统各部分各司其职、各尽所能。为编程人员敞开了一扇大门，使其编程的代码更简洁、更易于维护，并且具有更强的可重用性。有人说PHP不是一个真正的面向对象的语言，这是事实。PHP 是一个混合型语言，你可以使用OOP，也可以使用传统的过程化编程。然而，对于大型项目，你可能需要在PHP 中使用纯的OOP去声明类，而且在你的项目里只用对象和类。&lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;三、什么是类，什么是对象，类和对象这间的关系&lt;/h5&gt;
&lt;p&gt;类的概念：类是具有相同属性和服务的一组对象的集合。它为属于该类的所有对象提供了统一的抽象描述，其内部包括属性和服务两个主要部分。在面向对象的编程语言中，类是一个独立的程序单位，它应该有一个类名并包括属性说明和服务说明两个主要部分。&lt;/p&gt;

&lt;p&gt;对象的概念：对象是系统中用来描述客观事物的一个实体，它是构成系统的一个基本单位。一个对象由一组属性和对这组属性进行操作的一组服务组成。从更抽象的角度来说，对象是问题域或实现域中某些事物的一个抽象，它反映该事物在系统中需要保存的信息和发挥的作用；它是一组属性和有权对这些属性进行操作的一组服务的封装体。客观世界是由对象和对象之间的联系组成的。&lt;/p&gt;

&lt;p&gt;类与对象的关系就如模具和铸件的关系，类的实例化结果就是对象，而对一类对象的抽象就是类。类描述了一组有相同特性（属性）和相同行为（方法）的对象&lt;/p&gt;

&lt;h5 id=&quot;section-3&quot;&gt;四、类的定义与实力化&lt;/h5&gt;

&lt;p&gt;1、类的组成&lt;/p&gt;

&lt;p&gt;属性（也称变量或成员变量）&lt;/p&gt;

&lt;p&gt;方法（类中的函数被称为方法或成员方法）&lt;/p&gt;

&lt;p&gt;常量  (无法更改或撤销定义)&lt;/p&gt;

&lt;p&gt;2、类的定义&lt;/p&gt;

&lt;p&gt;定义方式：class 关键字&lt;/p&gt;

&lt;p&gt;定义成员变量的格式一般为：变量声明符  成员变量名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class  类名
{        
    public  变量名；  //类属性
    function  方法名(){
        //函数代码
    }
}	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3、类的实例化&lt;/p&gt;

&lt;p&gt;类的使用：定义类之后，如果想使用类，一般需先实例化成对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
$obj =  new  类名();  	//为类实例化对象
echo $obj-&amp;gt;属性名; 	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调用输出类中定义的属性（属性名前没有$符号）。
$obj-&amp;gt;方法名(); 			//调用输出类中定义的方法
注意：除了属性和方法外，还有常量和静态成员。常量和静态可以直接通过类名访问。&lt;/p&gt;

&lt;h5 id=&quot;section-4&quot;&gt;五、面向对象的三大特性&lt;/h5&gt;

&lt;p&gt;1、封装性，也称为信息隐藏。就是将一个类的使用和实现分开。只保留有限的接口与外部联系。使用者不必关心具体的实现，只知道每个方法的调用方式即可。&lt;/p&gt;

&lt;p&gt;好处：避免了程序之间的依赖性&lt;/p&gt;

&lt;p&gt;2、继承性：继承性就是派生类（子类）自动继承父类中的属性和方法，并可以修改或添加新的属性和方法。（注意：继承分单继承和多继承，php支持的是单继承，一个子类只能有一个父类）&lt;/p&gt;

&lt;p&gt;好处：提高了代码的重用性。&lt;/p&gt;

&lt;p&gt;3、多态性：多态即多种形态，具有表现多种形态的能力特征。在面向对象中表示根据对象的类型以不同方式处理（说白了就是调用同一个方法可以获得不同的结果）。&lt;/p&gt;

&lt;p&gt;好处：增强了软件的灵活性。&lt;/p&gt;

</description>
        <pubDate>Thu, 05 Nov 2015 15:00:47 +0800</pubDate>
        <link>https://wtydreamt.github.io/posts/welcome-to-wty1105/</link>
        <guid isPermaLink="true">https://wtydreamt.github.io/posts/welcome-to-wty1105/</guid>
        
        <category>php</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>ajax原理及应用!</title>
        <description>&lt;h5 id=&quot;ajax-&quot;&gt;ajax 简单应用&lt;/h5&gt;

&lt;p&gt;Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。&lt;/p&gt;

&lt;p&gt;　XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。
所以我们先从XMLHttpRequest讲起，来看看它的工作原理。
首先，我们先来看看XMLHttpRequest这个对象的属性。
它的属性有：
onreadystatechange  每次状态改变所触发事件的事件处理程序。&lt;/p&gt;

&lt;p&gt;responseText     从服务器进程返回数据的字符串形式。&lt;/p&gt;

&lt;p&gt;responseXML    从服务器进程返回的DOM兼容的文档数据对象。&lt;/p&gt;

&lt;p&gt;status           从服务器返回的数字代码，比如常见的404（未找到）和200（已就绪）&lt;/p&gt;

&lt;p&gt;status Text       伴随状态码的字符串信息&lt;/p&gt;

&lt;p&gt;readyState       对象状态值&lt;/p&gt;

&lt;p&gt;0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）&lt;/p&gt;

&lt;p&gt;1 (初始化) 对象已建立，尚未调用send方法&lt;/p&gt;

&lt;p&gt;2 (发送数据) send方法已调用，但是当前的状态及http头未知&lt;/p&gt;

&lt;p&gt;3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通
过responseBody和responseText获取部分数据会出现错误，&lt;/p&gt;

&lt;p&gt;4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
var ajax=new XMLHttpRequest();
ajax.open(&#39;get或post请求&#39;,&#39;请求地址&#39;);
ajax.send();
ajax.onreadystatechange=function(){
if(ajax.readyState==4&amp;amp;&amp;amp;ajax.status==200){
ajax.responseText; //返回值
}
}	
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;js&quot;&gt;js中常用的系统函数&lt;/h4&gt;

&lt;p&gt;Split(‘,’):把一个数组用逗号连接起来&lt;/p&gt;

&lt;p&gt;pop()：该方法用于删除并返回数组元素中最后一个元素&lt;/p&gt;

&lt;p&gt;shift()：该方法用于删除并返回数组的第一个元素&lt;/p&gt;

&lt;p&gt;push()：该方法向数组末尾添加一个或多个元素，并返回添加后
  的数组长度&lt;/p&gt;

&lt;p&gt;unshift()：该方法是向数组开头添加一个或者多个元素，并返回
  添加后的数组长度&lt;/p&gt;

&lt;p&gt;reverse()：该方法用于颠倒数组元素的顺序&lt;/p&gt;

&lt;p&gt;sort()：该方法用于将数组进行排序&lt;/p&gt;

&lt;h4 id=&quot;date-&quot;&gt;时间日期对象 date 类&lt;/h4&gt;

&lt;p&gt;方式一：var date=new Date()  //创建一个当前时间&lt;/p&gt;

&lt;p&gt;方式二：var date=new Date(2014,8,10) 指定年月日创建时间 写8实际上是9月份系统默认多一个月&lt;/p&gt;

&lt;p&gt;方式三：var date=new Date(“Jan 2,2008 10:21:22”)根据字符串创建对象&lt;/p&gt;

&lt;p&gt;date()：返回系统当前的日期和时间&lt;/p&gt;

&lt;p&gt;getDate()：从日期对象中返回一个月中的某一天&lt;/p&gt;

&lt;p&gt;getDay()：从日期对象中返回一周中的某一天&lt;/p&gt;

&lt;p&gt;getMonth()：从日期对象中返回月份&lt;/p&gt;

&lt;p&gt;getYear()：从日期对象中返回年份&lt;/p&gt;

&lt;p&gt;getHours()：从日期对象中返回小时&lt;/p&gt;

&lt;p&gt;getMinutes()：从日期对象中返回分钟&lt;/p&gt;

&lt;p&gt;getSeconds()：从日期对象中返回秒数&lt;/p&gt;

&lt;p&gt;getTime()：返回从1970年1月1日至今的毫秒数&lt;/p&gt;

&lt;p&gt;toLocaleString()根据本地时间格式，把日期对象转换为字符串&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;基本找对象方法&lt;/h4&gt;
&lt;p&gt;1、通过id找对象：document.getElementById(“元素id”)&lt;/p&gt;

&lt;p&gt;2、通过name找对象：document.getElementsByName(“元素name”)&lt;/p&gt;

&lt;p&gt;3、通过标签找对象：document.getElementsByTageName(“标签名”)&lt;/p&gt;

&lt;p&gt;4、通过forms找对象：document.forms[0]找到html文档中第一个表单，[]里的下标也可以写成表单的name属性&lt;/p&gt;

&lt;h4 id=&quot;javascriptstylecss&quot;&gt;javascript通过style属性来修改css&lt;/h4&gt;
&lt;p&gt;通过id或Nam或标签找到对象后：用对象名.style.css属性名来操作修改css样式例如：点击按钮，让div显示或隐藏&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;
Function fun(){
Document.getElementById(“main”).style.display=”none”
}
&lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;code&gt;&amp;lt;div id=&#39;main&#39;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;input type=&#39;button&#39; onclick=&#39;fun()&#39;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;history&quot;&gt;history对象的方法&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
History.go(-1)：后退
History.go(0)：刷新
History.go(1)：前进
History.back()：后退
History.forward()：前进	
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;window&quot;&gt;灵活运用window对象的方法&lt;/h4&gt;
&lt;p&gt;window.alert()：弹出一个带有确定按钮的对话框&lt;/p&gt;

&lt;p&gt;window.confirm(确认信息)
：弹出一个带有确认和取消按钮的对话框,返回bool类型true或false如果点确定，代表 true,否则false;&lt;/p&gt;

&lt;p&gt;window.prompt(提示信息)：弹出一个带有输入框的对话框&lt;/p&gt;

&lt;p&gt;window.open(url,’_blank’,style)：打开一个新的窗口&lt;/p&gt;

&lt;p&gt;window.print() 打印&lt;/p&gt;

&lt;p&gt;window.close()：关闭浏览器&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Nov 2015 12:00:47 +0800</pubDate>
        <link>https://wtydreamt.github.io/posts/welcome-to-wty029/</link>
        <guid isPermaLink="true">https://wtydreamt.github.io/posts/welcome-to-wty029/</guid>
        
        <category>Javascript</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TingYu Wang</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>https://wtydreamt.github.io/</link>
    <atom:link href="https://wtydreamt.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 21 Nov 2016 14:53:37 +0800</pubDate>
    <lastBuildDate>Mon, 21 Nov 2016 14:53:37 +0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>如何预防sql注入!</title>
        <description>&lt;h5 id=&quot;mysql-sql&quot;&gt;关于mysql sql注入简单预防&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;msyql_real_escape_string()&lt;/code&gt;函数转义 SQL 语句中使用的字符串的特殊字符。&lt;br /&gt;
提示：可使用本函数来预防数据库攻击。&lt;br /&gt;
受影响的字符：&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
   \x00
    \n
    \r
    \ 
    &#39; 
    &quot; 
    \x1a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。&lt;br /&gt;
预定义字符是：&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    单引号（&#39;）
    双引号（&quot;）
    反斜杠（\）
    NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;提示：该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串。  &lt;br /&gt;
默认地，PHP 对所有的 GET、POST 和 COOKIE 数据自动运行 addslashes()。所以您不应对已转义过的字符串使用 addslashes()，因为这样会导致双层转义。遇到这种情况时可以使用函数 get_magic_quotes_gpc() 进行检测。&lt;br /&gt;
get_magic_quotes_gpc()函数用法介绍: &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;当magic_quotes_gpc=On的时候，函数get_magic_quotes_gpc()就会返回1&lt;/p&gt;

&lt;p&gt;当magic_quotes_gpc=Off的时候，函数get_magic_quotes_gpc()就会返回0&lt;/p&gt;

&lt;p&gt;举例说明1：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
$con = mysql_connect(&quot;localhost&quot;, &quot;hello&quot;, &quot;321&quot;);
if (!$con)
  {
  die(&#39;Could not connect: &#39; . mysql_error());
  }

// 获得用户名和密码的代码

// 转义用户名和密码，以便在 SQL 中使用
$user = mysql_real_escape_string($user);
$pwd = mysql_real_escape_string($pwd);

$sql = &quot;SELECT * FROM users WHERE
user=&#39;&quot; . $user . &quot;&#39; AND password=&#39;&quot; . $pwd . &quot;&#39;&quot;

// 更多代码

mysql_close($con);	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;举例2：
数据库攻击。本例演示如果我们不对用户名和密码应用 mysql_real_escape_string() 函数会发生什么：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
	$con = mysql_connect(&quot;localhost&quot;, &quot;hello&quot;, &quot;321&quot;);
if (!$con)
  {
  die(&#39;Could not connect: &#39; . mysql_error());
  }

$sql = &quot;SELECT * FROM users
WHERE user=&#39;{$_POST[&#39;user&#39;]}&#39;
AND password=&#39;{$_POST[&#39;pwd&#39;]}&#39;&quot;;
mysql_query($sql);

// 不检查用户名和密码
// 可以是用户输入的任何内容，比如：
$_POST[&#39;user&#39;] = &#39;john&#39;;
$_POST[&#39;pwd&#39;] = &quot;&#39; OR &#39;&#39;=&#39;&quot;;

// 一些代码...

mysql_close($con);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么 SQL 查询会成为这样:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
SELECT * FROM users
WHERE user=&#39;john&#39; AND password=&#39;&#39; OR &#39;&#39;=&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这意味着任何用户无需输入合法的密码即可登陆。&lt;br /&gt;
预防数据库攻击的正确做法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
function check_input($value)
{
// 去除斜杠
if (get_magic_quotes_gpc())
  {
  $value = stripslashes($value);
  }
// 如果不是数字则加引号
if (!is_numeric($value))
  {
  $value = &quot;&#39;&quot; . mysql_real_escape_string($value) . &quot;&#39;&quot;;
  }
return $value;
}

$con = mysql_connect(&quot;localhost&quot;, &quot;hello&quot;, &quot;321&quot;);
if (!$con)
  {
  die(&#39;Could not connect: &#39; . mysql_error());
  }

// 进行安全的 SQL
$user = check_input($_POST[&#39;user&#39;]);
$pwd = check_input($_POST[&#39;pwd&#39;]);
$sql = &quot;SELECT * FROM users WHERE
user=$user AND password=$pwd&quot;;

mysql_query($sql);

mysql_close($con);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
&lt;p&gt;本文摘自：http://www.w3school.com.cn/php/func_string_addslashes.asp&lt;/p&gt;

</description>
        <pubDate>Fri, 28 Oct 2016 17:00:47 +0800</pubDate>
        <link>https://wtydreamt.github.io/posts/welcome-to-wty1028/</link>
        <guid isPermaLink="true">https://wtydreamt.github.io/posts/welcome-to-wty1028/</guid>
        
        <category>mysql</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>js 调用浏览器打印页面!</title>
        <description>&lt;h5 id=&quot;js-&quot;&gt;简单介绍 js 打印功能,话不多说下面奉上代码。&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt; 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&amp;gt;
&amp;lt;title&amp;gt;haorooms js局部打印案例&amp;lt;/title&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt; 
    function doPrint() {    
        bdhtml=window.document.body.innerHTML;    
        sprnstr=&quot;&amp;lt;!--startprint--&amp;gt;&quot;; //标记开始打印地方    
        eprnstr=&quot;&amp;lt;!--endprint--&amp;gt;&quot;;   //标记打印结束的地方
        prnhtml=bdhtml.substr(bdhtml.indexOf(sprnstr)+17);    
        prnhtml=prnhtml.substring(0,prnhtml.indexOf(eprnstr));    
        window.document.body.innerHTML=prnhtml; 
        window.print();    
	}
&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
&amp;lt;!--startprint--&amp;gt;
&amp;lt;h1&amp;gt;此处是要打印的页面(●&#39;◡&#39;●)&amp;lt;/h1&amp;gt;
&amp;lt;!--endprint--&amp;gt;
&amp;lt;button type=&quot;button&quot; onclick=&quot;doPrint()&quot;&amp;gt;打印&amp;lt;/button&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;startprint--endprint-&quot;&gt;startprint 标记打印的开始处 endprint 标记打印的结束&lt;/h5&gt;

</description>
        <pubDate>Mon, 05 Sep 2016 16:00:08 +0800</pubDate>
        <link>https://wtydreamt.github.io/posts/welcome-to-wty0905/</link>
        <guid isPermaLink="true">https://wtydreamt.github.io/posts/welcome-to-wty0905/</guid>
        
        <category>Javascript</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>memcache 资料!</title>
        <description>&lt;h5 id=&quot;memcache&quot;&gt;MemCache是什么&lt;/h5&gt;

&lt;p&gt;MemCache的数据存放在内存中同时意味着只要MemCache重启了，数据就会消失&lt;/p&gt;

&lt;p&gt;MemCache是一个自由、源码开放、高性能、分布式的分布式内存对象缓存系统，用于动态Web应用以减轻数据库的负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高了网站访问的速度。MemCaChe是一个存储键值对的HashMap，在内存中对任意的数据（比如字符串、对象等）所使用的key-value存储，数据可以来自数据库调用、API调用，或者页面渲染的结果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/memcache.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MemCache虽然被称为”分布式缓存”，但是MemCache本身完全不具备分布式的功能。它的分布式是通过客户端的程序实现的。&lt;/p&gt;

&lt;p&gt;1、应用程序输入需要写缓存的数据&lt;/p&gt;

&lt;p&gt;2、API将Key输入路由算法模块，路由算法根据Key和MemCache集群服务器列表得到一台服务器编号&lt;/p&gt;

&lt;p&gt;3、由服务器编号得到MemCache及其的ip地址和端口号&lt;/p&gt;

&lt;p&gt;4、API调用通信模块和指定编号的服务器通信，将数据写入该服务器，完成一次分布式缓存的写操作&lt;/p&gt;

&lt;p&gt;读缓存和写缓存一样，只要使用相同的路由算法和服务器列表，只要应用程序查询的是相同的Key，MemCache客户端总是访问相同的客户端去读取数据，只要服务器中还缓存着该数据，就能保证缓存命中。&lt;/p&gt;

&lt;p&gt;这种MemCache集群的方式也是从分区容错性的方面考虑的，假如Node2宕机了，那么Node2上面存储的数据都不可用了，此时由于集群中Node0和Node1还存在，下一次请求Node2中存储的Key值的时候，肯定是没有命中的，这时先从数据库中拿到要缓存的数据，然后路由算法模块根据Key值在Node0和Node1中选取一个节点，把对应的数据放进去，这样下一次就又可以走缓存了，这种集群的做法很好，但是缺点是成本比较大。&lt;/p&gt;

&lt;p&gt;命    令 	     作    用&lt;/p&gt;

&lt;p&gt;get 	         返回Key对应的Value值&lt;/p&gt;

&lt;p&gt;add  	         无条件地设置一个Key值，没有就增加，有就覆盖&lt;/p&gt;

&lt;p&gt;set  	 	     按照相应的Key值添加数据，如果Key已经存在则会操作失败&lt;/p&gt;

&lt;p&gt;replace  	     按照相应的Key值替换数据，如果Key值不存在则会操作失败&lt;/p&gt;

&lt;p&gt;stats 		     返回MemCache通用统计信息（下面有详细解读）
stats items      返回各个slab中item的数目和最老的item的年龄
                （最后一次访问距离现在的秒数）&lt;/p&gt;

&lt;p&gt;stats slabs      返回MemCache运行期间创建的每个slab的信息（下面有详细解读）&lt;/p&gt;

&lt;p&gt;version 	     返回当前MemCache版本号&lt;/p&gt;

&lt;p&gt;flush_all 	     清空所有键值，但不会删除items，所以此时MemCache依旧占用内存&lt;/p&gt;

&lt;p&gt;quit 	         关闭连接&lt;/p&gt;

&lt;h5 id=&quot;memcache-&quot;&gt;memcache 的过期数据惰性删除&lt;/h5&gt;

&lt;p&gt;清空所有键值&lt;/p&gt;

&lt;p&gt;flush_all&lt;/p&gt;

&lt;p&gt;注：flush并不会将items删除，只是将所有的items标记为expired，因此这时memcache依旧占用所有内存(flush 并不会把存储的数据真正的删除掉只是把这个数据的状态改为了过期失效但是它依然占用内存空间)&lt;/p&gt;

&lt;p&gt;在操作系统系统中，常用的删除机制有fifo、lru删除&lt;/p&gt;

&lt;p&gt;lru：least recently used 最近最少使用&lt;/p&gt;

&lt;p&gt;fifo：first in，first out 最先插入，最先离开&lt;/p&gt;

&lt;p&gt;原理: 当某个单元被请求时,维护一个计数器,通过计数器来判断最近谁最少被使用。&lt;/p&gt;

&lt;p&gt;注: 即使某个key 是设置的永久有效期,也一样会被踢出来!&lt;/p&gt;

&lt;p&gt;即–永久数据被踢现象&lt;/p&gt;

&lt;p&gt;阿里2014笔试题一道：&lt;/p&gt;

&lt;p&gt;memcache缓存系统采用LRU淘汰算法，假定缓存容量为4,并且初始为空，那么在顺序访问一下数据项的时候：1,5,1,3,5,2,4,1,2出现缓存直接命中的次数是？，最后缓存中即将准备淘汰的数据项是？&lt;/p&gt;

&lt;p&gt;答案：3， 5&lt;/p&gt;

&lt;p&gt;解答：&lt;/p&gt;

&lt;p&gt;1调入内存 1&lt;/p&gt;

&lt;p&gt;5调入内存 1 5&lt;/p&gt;

&lt;p&gt;1调入内存 5 1（命中 1，更新次序）&lt;/p&gt;

&lt;p&gt;3调入内存 5 1 3&lt;/p&gt;

&lt;p&gt;5调入内存 1 3 5 （命中5）&lt;/p&gt;

&lt;p&gt;2调入内存 1 3 5 2&lt;/p&gt;

&lt;p&gt;4调入内存（1最久未使用，淘汰1） 3 5 2 4&lt;/p&gt;

&lt;p&gt;1调入内存（3最久未使用，淘汰3） 5 2 4 1&lt;/p&gt;

&lt;p&gt;2调入内存 5 4 1 2（命中2）&lt;/p&gt;

&lt;p&gt;因此，直接命中次数是3,最后缓存即将准备淘汰的数据项是5&lt;/p&gt;

</description>
        <pubDate>Mon, 05 Sep 2016 16:00:08 +0800</pubDate>
        <link>https://wtydreamt.github.io/posts/welcome-to-wty0901/</link>
        <guid isPermaLink="true">https://wtydreamt.github.io/posts/welcome-to-wty0901/</guid>
        
        <category>memcache</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>jekyll github 个人博客搭建!</title>
        <description>&lt;p&gt;搭建一个jekyll github&lt;/p&gt;

&lt;h4 id=&quot;jekyll-github-githubusernamegithubiogithubhttpspagesgithubcomusernamegithubiohttpwwwliaoxuefengcomwiki0013739516305929606dd18361248578c67b8067c8c017b000jekyllwindows&quot;&gt;搭建一个jekyll github 博客首先在github上创建一个&lt;code&gt;username.github.io&lt;/code&gt;的仓库熟悉github的程序猿可以直接参考&lt;code&gt;https://pages.github.com/&lt;/code&gt;这个地址来搭建&lt;code&gt;username.github.io&lt;/code&gt;仓库如果不熟悉的可以先看&lt;code&gt;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/&lt;/code&gt;这个教程在开始上面的步骤。基本准备工作做完后就开始安装jekyll这里我是在windows下安装的安装中我们需要注意的是版本&lt;/h4&gt;
&lt;hr /&gt;
&lt;h3&gt;安装Ruby&lt;/h3&gt;
&lt;p&gt;Jekyll是一款静态网站生成工具，允许用户使用HTML、Markdown或Textile通过模块的方式建立所需网站，然后通过模板引擎Liquid（Liquid Templating Engine）来运行或者生成对应的静态网站文件.
在GitHub上使用较多，通过GitHub搭建自己的博客一般来说就是使用Jekyll；因为GitHub的渲染引擎默认为Jekyll。&lt;br /&gt;
Jekyll是一款基于Ruby的插件，安装Ruby是必须的
&lt;br /&gt;
下载ruby：&lt;a href=&quot;https://www.ruby-lang.org/zh_cn/downloads/&quot;&gt;点击下载&lt;/a&gt;
&lt;br /&gt;安装时选中“Add Ruby executables to your PATH”这样将自动完成环境变量的配置。打开cmd&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
#=&amp;gt;在cmd中输入 
ruby -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果显示ruby的版本号则安装成功&lt;/p&gt;

&lt;hr /&gt;
&lt;h3&gt;安装 jekyll&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
#=&amp;gt;在cmd中输入 
gem install jekyll
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section&quot;&gt;在这里可能会出现这样的错误&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;ERROR: Could not find a valid gem ‘jekyll’ (&amp;gt;= 0), here is why:
Unable to download data from https://rubygems.org/ - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (https://api.rubygems.org/latest_spece.4.8.gz)&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-1&quot;&gt;解决办法&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
$ gem --remove https://rubygems.org/ #移除原有镜像
$ gem sources --add http://gems.ruby-china.org/ #添加新镜像 
$ gem sources -l #查看镜像
https://gems.ruby-china.org
# 确保只有 gems.ruby-china.org
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-2&quot;&gt;接着执行&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
gem install jekyll -v &#39;3.0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;jekylljekyll&quot;&gt;jekyll版本过高可能会出错，如果已经安装了jekyll过高的版本可以用下面的命令删除后重新安装&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;
gem uninstall jekyll -a
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;blog&quot;&gt;上面准备工作做完后就可以开始做我们的博客了首先创建一个blog&lt;/h4&gt;
&lt;p&gt;打开命令行在任意位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
jekyll new blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个时候就会生成一个blog的文件夹命令行进入到blog文件夹中然后执行命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
最后输出Now browse to http://localhost:4000访问&lt;code&gt;http://localhost:4000&lt;/code&gt;这样就ok了。如果在本地运行后没问题那你就可以把它推到git上了就是上面第一步骤中的仓库里。接着就可以根据自己的爱好来搭建博客了如果还有什么疑问可以点击这里来看看:&lt;a href=&quot;http://wiki.jikexueyuan.com/project/jekyll/&quot;&gt;点我&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jun 2016 00:09:47 +0800</pubDate>
        <link>https://wtydreamt.github.io/posts/welcome-to-jekyll/</link>
        <guid isPermaLink="true">https://wtydreamt.github.io/posts/welcome-to-jekyll/</guid>
        
        <category>jekyll</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>laravel 框架中邮件发送类!</title>
        <description>&lt;p&gt;配置config文件下的文件（mail.php）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

return [


    &#39;driver&#39; =&amp;gt; env(&#39;MAIL_DRIVER&#39;, &#39;smtp&#39;),


    &#39;host&#39; =&amp;gt; &#39;smtp.163.com&#39;,

    &#39;port&#39; =&amp;gt; 25,

    &#39;from&#39; =&amp;gt; [&#39;address&#39; =&amp;gt; &quot;wtydreaml@163.com&quot;, &#39;name&#39; =&amp;gt; &quot;不哭&quot;],

    &#39;encryption&#39; =&amp;gt; env(&#39;MAIL_ENCRYPTION&#39;, &#39;tls&#39;),

    &#39;username&#39; =&amp;gt; &quot;wtydreaml@163.com&quot;,

    &#39;password&#39; =&amp;gt; &quot;wty******&quot;,     //授权密码

    &#39;sendmail&#39; =&amp;gt; &#39;/usr/sbin/sendmail -bs&#39;,

    &#39;pretend&#39; =&amp;gt; false,

];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;控制器中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Mail;  //引入邮箱类
use DB;
use App\Http\Requests;
use App\Http\Controllers\Controller;
header(&quot;content-type:text/html;charset=utf8&quot;);
class MailController extends Controller
{

    public function mail(Request $request)
    {
        $arr=$request-&amp;gt;input();
        				   //邮件内容
            Mail::raw($arr[&#39;content&#39;], function ($message) use ($arr)
            {
               $message-&amp;gt;subject($arr[&#39;title&#39;]); //邮件标题
               $message-&amp;gt;to($arr[&#39;getname&#39;]);    //接受人邮箱
            });

    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 02 Feb 2016 13:00:47 +0800</pubDate>
        <link>https://wtydreamt.github.io/posts/welcome-to-0202/</link>
        <guid isPermaLink="true">https://wtydreamt.github.io/posts/welcome-to-0202/</guid>
        
        <category>小记</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>

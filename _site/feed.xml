<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TingYu Wang</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>https://wtydreamt.github.io/</link>
    <atom:link href="https://wtydreamt.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 29 Oct 2016 12:02:23 +0800</pubDate>
    <lastBuildDate>Sat, 29 Oct 2016 12:02:23 +0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>如何预防sql注入!</title>
        <description>&lt;h5 id=&quot;mysql-sql&quot;&gt;关于mysql sql注入简单预防&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;msyql_real_escape_string()&lt;/code&gt;函数转义 SQL 语句中使用的字符串的特殊字符。&lt;br /&gt;
提示：可使用本函数来预防数据库攻击。&lt;br /&gt;
受影响的字符：&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
   \x00
    \n
    \r
    \ 
    &#39; 
    &quot; 
    \x1a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。&lt;br /&gt;
预定义字符是：&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    单引号（&#39;）
    双引号（&quot;）
    反斜杠（\）
    NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;提示：该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串。  &lt;br /&gt;
默认地，PHP 对所有的 GET、POST 和 COOKIE 数据自动运行 addslashes()。所以您不应对已转义过的字符串使用 addslashes()，因为这样会导致双层转义。遇到这种情况时可以使用函数 get_magic_quotes_gpc() 进行检测。&lt;br /&gt;
get_magic_quotes_gpc()函数用法介绍: &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;当magic_quotes_gpc=On的时候，函数get_magic_quotes_gpc()就会返回1&lt;/p&gt;

&lt;p&gt;当magic_quotes_gpc=Off的时候，函数get_magic_quotes_gpc()就会返回0&lt;/p&gt;

&lt;p&gt;举例说明1：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
$con = mysql_connect(&quot;localhost&quot;, &quot;hello&quot;, &quot;321&quot;);
if (!$con)
  {
  die(&#39;Could not connect: &#39; . mysql_error());
  }

// 获得用户名和密码的代码

// 转义用户名和密码，以便在 SQL 中使用
$user = mysql_real_escape_string($user);
$pwd = mysql_real_escape_string($pwd);

$sql = &quot;SELECT * FROM users WHERE
user=&#39;&quot; . $user . &quot;&#39; AND password=&#39;&quot; . $pwd . &quot;&#39;&quot;

// 更多代码

mysql_close($con);	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;举例2：
数据库攻击。本例演示如果我们不对用户名和密码应用 mysql_real_escape_string() 函数会发生什么：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
	$con = mysql_connect(&quot;localhost&quot;, &quot;hello&quot;, &quot;321&quot;);
if (!$con)
  {
  die(&#39;Could not connect: &#39; . mysql_error());
  }

$sql = &quot;SELECT * FROM users
WHERE user=&#39;{$_POST[&#39;user&#39;]}&#39;
AND password=&#39;{$_POST[&#39;pwd&#39;]}&#39;&quot;;
mysql_query($sql);

// 不检查用户名和密码
// 可以是用户输入的任何内容，比如：
$_POST[&#39;user&#39;] = &#39;john&#39;;
$_POST[&#39;pwd&#39;] = &quot;&#39; OR &#39;&#39;=&#39;&quot;;

// 一些代码...

mysql_close($con);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么 SQL 查询会成为这样:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
SELECT * FROM users
WHERE user=&#39;john&#39; AND password=&#39;&#39; OR &#39;&#39;=&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这意味着任何用户无需输入合法的密码即可登陆。&lt;br /&gt;
预防数据库攻击的正确做法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
function check_input($value)
{
// 去除斜杠
if (get_magic_quotes_gpc())
  {
  $value = stripslashes($value);
  }
// 如果不是数字则加引号
if (!is_numeric($value))
  {
  $value = &quot;&#39;&quot; . mysql_real_escape_string($value) . &quot;&#39;&quot;;
  }
return $value;
}

$con = mysql_connect(&quot;localhost&quot;, &quot;hello&quot;, &quot;321&quot;);
if (!$con)
  {
  die(&#39;Could not connect: &#39; . mysql_error());
  }

// 进行安全的 SQL
$user = check_input($_POST[&#39;user&#39;]);
$pwd = check_input($_POST[&#39;pwd&#39;]);
$sql = &quot;SELECT * FROM users WHERE
user=$user AND password=$pwd&quot;;

mysql_query($sql);

mysql_close($con);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
&lt;p&gt;本文摘自：http://www.w3school.com.cn/php/func_string_addslashes.asp&lt;/p&gt;

</description>
        <pubDate>Fri, 28 Oct 2016 17:00:47 +0800</pubDate>
        <link>https://wtydreamt.github.io/posts/welcome-to-wty1028/</link>
        <guid isPermaLink="true">https://wtydreamt.github.io/posts/welcome-to-wty1028/</guid>
        
        <category>msyql</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>jekyll github 个人博客搭建!</title>
        <description>&lt;p&gt;搭建一个jekyll github&lt;/p&gt;

&lt;h4 id=&quot;jekyll-github-githubusernamegithubiogithubhttpspagesgithubcomusernamegithubiohttpwwwliaoxuefengcomwiki0013739516305929606dd18361248578c67b8067c8c017b000jekyllwindows&quot;&gt;搭建一个jekyll github 博客首先在github上创建一个&lt;code&gt;username.github.io&lt;/code&gt;的仓库熟悉github的程序猿可以直接参考&lt;code&gt;https://pages.github.com/&lt;/code&gt;这个地址来搭建&lt;code&gt;username.github.io&lt;/code&gt;仓库如果不熟悉的可以先看&lt;code&gt;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/&lt;/code&gt;这个教程在开始上面的步骤。基本准备工作做完后就开始安装jekyll这里我是在windows下安装的安装中我们需要注意的是版本&lt;/h4&gt;
&lt;hr /&gt;
&lt;h3&gt;安装Ruby&lt;/h3&gt;
&lt;p&gt;Jekyll是一款静态网站生成工具，允许用户使用HTML、Markdown或Textile通过模块的方式建立所需网站，然后通过模板引擎Liquid（Liquid Templating Engine）来运行或者生成对应的静态网站文件.
在GitHub上使用较多，通过GitHub搭建自己的博客一般来说就是使用Jekyll；因为GitHub的渲染引擎默认为Jekyll。&lt;br /&gt;
Jekyll是一款基于Ruby的插件，安装Ruby是必须的
&lt;br /&gt;
下载ruby：&lt;a href=&quot;https://www.ruby-lang.org/zh_cn/downloads/&quot;&gt;点击下载&lt;/a&gt;
&lt;br /&gt;安装时选中“Add Ruby executables to your PATH”这样将自动完成环境变量的配置。打开cmd&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
#=&amp;gt;在cmd中输入 
ruby -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果显示ruby的版本号则安装成功&lt;/p&gt;

&lt;hr /&gt;
&lt;h3&gt;安装 jekyll&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
#=&amp;gt;在cmd中输入 
gem install jekyll
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section&quot;&gt;在这里可能会出现这样的错误&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;ERROR: Could not find a valid gem ‘jekyll’ (&amp;gt;= 0), here is why:
Unable to download data from https://rubygems.org/ - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (https://api.rubygems.org/latest_spece.4.8.gz)&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-1&quot;&gt;解决办法&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
$ gem --remove https://rubygems.org/ #移除原有镜像
$ gem sources --add http://gems.ruby-china.org/ #添加新镜像 
$ gem sources -l #查看镜像
https://gems.ruby-china.org
# 确保只有 gems.ruby-china.org
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-2&quot;&gt;接着执行&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
gem install jekyll -v &#39;3.0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;jekylljekyll&quot;&gt;jekyll版本过高可能会出错，如果已经安装了jekyll过高的版本可以用下面的命令删除后重新安装&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;
gem uninstall jekyll -a
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;blog&quot;&gt;上面准备工作做完后就可以开始做我们的博客了首先创建一个blog&lt;/h4&gt;
&lt;p&gt;打开命令行在任意位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
jekyll new blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个时候就会生成一个blog的文件夹命令行进入到blog文件夹中然后执行命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
最后输出Now browse to http://localhost:4000访问&lt;code&gt;http://localhost:4000&lt;/code&gt;这样就ok了。如果在本地运行后没问题那你就可以把它推到git上了就是上面第一步骤中的仓库里。接着就可以根据自己的爱好来搭建博客了如果还有什么疑问可以点击这里来看看:&lt;a href=&quot;http://wiki.jikexueyuan.com/project/jekyll/&quot;&gt;点我&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jun 2016 00:09:47 +0800</pubDate>
        <link>https://wtydreamt.github.io/posts/welcome-to-jekyll/</link>
        <guid isPermaLink="true">https://wtydreamt.github.io/posts/welcome-to-jekyll/</guid>
        
        <category>jekyll</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>程序猿的一天!</title>
        <description>&lt;h5 id=&quot;section&quot;&gt;只是这有霾的都市&lt;/h5&gt;

&lt;p&gt;天本已经大亮了，只是在这有霾的都市，阳光还没撒到地面就被细微的颗粒收了去，迷雾中泛着点光的色彩，透露出徒有虚表的美感。路上的车辆在雾大时还会开启双闪，以防不测，一闪一灭，好似生命的呼吸，向人们告示，雾霾并没有夺走这个城市的生命。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/beijin.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 11 Jan 2016 09:09:47 +0800</pubDate>
        <link>https://wtydreamt.github.io/posts/welcome-to-wty/</link>
        <guid isPermaLink="true">https://wtydreamt.github.io/posts/welcome-to-wty/</guid>
        
        <category>随记</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>PDO msyqli 操作!</title>
        <description>&lt;h5 id=&quot;phpmysqli&quot;&gt;PHP高级特性八之mysqli函数库的使用&lt;/h5&gt;

&lt;p&gt;1.什么是mysqli&lt;/p&gt;

&lt;p&gt;PHP-MySQL 函数库是 PHP 操作 MySQL 资料库最原始的扩展库，PHP-MySQLi 的 i 代表 Improvement ，相当于前者的增强版，也包含了相对进阶的功能，另外本身也增加了安全性，比如可以大幅度减少 SQL 注入等问题的发生。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;mysql与mysqli的概念相关&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;（1）mysql与mysqli都是php方面的函数集，与mysql数据库关联不大。&lt;/p&gt;

&lt;p&gt;（2）在php5版本之前，一般是用php的mysql函数去驱动mysql数据库的，比如mysql_query()的函数，属于面向过程&lt;/p&gt;

&lt;p&gt;（3）在php5版本以后，增加了mysqli的函数功能，某种意义上讲，它是mysql系统函数的增强版，更稳定更高效更安全，与mysql_query()对应的有mysqli_query()，属于面向对象，用对象的方式操作驱动mysql数据库&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;mysql与mysqli的主要区别&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;（1）mysql是非持继连接函数，mysql每次链接都会打开一个连接的进程，所以mysqli耗费资源少一些。&lt;/p&gt;

&lt;p&gt;（2）mysqli是永远连接函数，mysqli多次运行mysqli将使用同一连接进程,从而减少了服务器的开销。mysqli封装了诸如事务等一些高级操作，同时封装了DB操作过程中的很多可用的方法。&lt;/p&gt;

&lt;h5 id=&quot;section&quot;&gt;连接数据库并获取相关信息&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;
	 $mysqli=@new mysqli(&quot;localhost&quot;, &quot;root&quot;, &quot;****&quot;, &quot;database&quot;);
    //如果连接错误
    if(mysqli_connect_errno()){
        echo &quot;连接数据库失败：&quot;.mysqli_connect_error();
        $mysqli=null;
        exit;
    }
    //获取当前字符集
    echo $mysqli-&amp;gt;character_set_name().&quot;&lt;br /&gt;&quot;;
    //获取客户端信息
    echo $mysqli-&amp;gt;get_client_info().&quot;&lt;br /&gt;&quot;;
    //获取mysql主机信息
    echo $mysqli-&amp;gt;host_info.&quot;&lt;br /&gt;&quot;;
    //获取服务器信息
    echo $mysqli-&amp;gt;server_info.&quot;&lt;br /&gt;&quot;;
    //获取服务器版本
    echo $mysqli-&amp;gt;server_version.&quot;&lt;br /&gt;&quot;;
    //关闭数据库连接
    $mysqli-&amp;gt;close();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;msyqli 查询&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
//连接数据库  第一个参数、 主机ip 参数二、用户名 参数三、密码 参数四、数据库名
$connect = mysqli_connect(&#39;localhost&#39;,&#39;root&#39;,&#39;root&#39;,&#39;qq&#39;) or die(&#39;Unale to connect&#39;);
//设置字符编码
mysqli_query($connect,&#39;set names utf8&#39;);
$sql = &quot;SELECT * FROM user3
WHERE username=&#39;wty&#39;;
$result = mysqli_query($connect,$sql);
 while($res=mysqli_fetch_row($result))
 	{
 		print_r($res);	
 	}	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;插入数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
$mysqli=@new mysqli(&quot;localhost&quot;, &quot;root&quot;, &quot;****&quot;, &quot;database&quot;);
    //如果连接错误
    if(mysqli_connect_errno()){
        echo &quot;连接数据库失败：&quot;.mysqli_connect_error();
        $mysqli=null;
        exit;
    }
    //插入数据
    $sql=&quot;insert into designer(name,phone) values(&#39;hello&#39;,&#39;18352682923&#39;)&quot;;
    //执行插入语句
    $result=$mysqli-&amp;gt;query($sql);
    //如果执行错误
    if(!$result){
        echo &quot;SQL语句有误&lt;br /&gt;&quot;;
        echo &quot;ERROR:&quot;.$mysqli-&amp;gt;errno.&quot;|&quot;.$mysqli-&amp;gt;error;
        exit;    
    }
    //如果插入成功，则返回影响的行数
    echo $mysqli-&amp;gt;affected_rows;
    //关闭数据库连接
    $mysqli-&amp;gt;close();		
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
$mysqli=@new mysqli(&quot;localhost&quot;, &quot;root&quot;, &quot;****&quot;, &quot;database&quot;);
    //如果连接错误
    if(mysqli_connect_errno()){
        echo &quot;连接数据库失败：&quot;.mysqli_connect_error();
        $mysqli=null;
        exit;
    }
    //插入数据
    $sql=&quot;update designer set name = &#39;hello&#39; where id = 10062&quot;;
    //执行插入语句
    $result=$mysqli-&amp;gt;query($sql);
    //如果执行错误
    if(!$result){
        echo &quot;SQL语句有误&lt;br /&gt;&quot;;
        echo &quot;ERROR:&quot;.$mysqli-&amp;gt;errno.&quot;|&quot;.$mysqli-&amp;gt;error;
        exit;    
    }
    //如果插入成功，则返回影响的行数
    echo $mysqli-&amp;gt;affected_rows;
    //关闭数据库连接
    $mysqli-&amp;gt;close();	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;预处理语句&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
$mysqli = @new mysqli(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;design&quot;);
    //如果连接错误
    if(mysqli_connect_errno()){
        echo &quot;连接数据库失败：&quot;.mysqli_connect_error();
        $mysqli=null;
        exit;
    }
    //准备好一条语句放到服务器中，插入语句
    $sql = &quot;insert into designer(name, email) values(?, ?)&quot;;
    //生成预处理语句
    $stmt = $mysqli-&amp;gt;prepare($sql);
    //给占位符号每个?号传值（绑定参数） i  d  s  b，第一个参数为格式化字符，ss代表两个字符串，d代表数字
    $stmt-&amp;gt;bind_param(&quot;ss&quot;, $name, $email);
    //为变量赋值
    $name = &quot;Mike&quot;;
    $email = &quot;mike@live.cn&quot;;
    //执行
    $stmt-&amp;gt;execute();
    //为变量赋值
    $name = &quot;Larry&quot;;
    $email = &quot;larry@live.cn&quot;;
    //执行
    $stmt-&amp;gt;execute();
    //最后输出
    echo &quot;最后ID&quot;.$stmt-&amp;gt;insert_id.&quot;&lt;br /&gt;&quot;;
    echo &quot;影响了&quot;.$stmt-&amp;gt;affected_rows.&quot;行&lt;br /&gt;&quot;;
    //关闭数据库连接
    $mysqli-&amp;gt;close();	
		
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;上文摘自：http://cuiqingcai.com/1534.html&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;pdo&quot;&gt;为什么要使用PDO？&lt;/h4&gt;
&lt;p&gt;PDO拥有更好的编程接口，你可以使用它写出更加简洁，高效，安全的代码。PDO还为不同的SQL数据库提供了不同的驱动，方便你使用新的数据库而不用再学习不同的编程接口。与拼接SQL语句构造查询语句不同，绑定参数可以简洁方便的构造出更加安全的查询语句，使用绑定参数的方法在 多次相似语句查询（仅仅某个参数不同）中也可以提高不少性能。PDO在错误处理方面也提供了多种方法。mysql_*函数缺乏一致的处理，与PDO的异常模式相比，或者说没有处理异常，使用PDO，你可以得到一致的错误处理，这将节省您大量的时间来跟踪问题。&lt;/p&gt;

&lt;p&gt;pdo操作代码来自：http://www.runoob.com/php/php-pdo.html&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
	$dbms=&#39;mysql&#39;;     //数据库类型
$host=&#39;localhost&#39;; //数据库主机名
$dbName=&#39;test&#39;;    //使用的数据库
$user=&#39;root&#39;;      //数据库连接用户名
$pass=&#39;&#39;;          //对应的密码
$dsn=&quot;$dbms:host=$host;dbname=$dbName&quot;;


try {
    $dbh = new PDO($dsn, $user, $pass); //初始化一个PDO对象
    echo &quot;连接成功&lt;br /&gt;&quot;;
    /*你还可以进行一次搜索操作
    foreach ($dbh-&amp;gt;query(&#39;SELECT * from FOO&#39;) as $row) {
        print_r($row); //你可以用 echo($GLOBAL); 来看到这些值
    }
    */
    $dbh = null;
} catch (PDOException $e) {
    die (&quot;Error!: &quot; . $e-&amp;gt;getMessage() . &quot;&lt;br /&gt;&quot;);
}
//默认这个不是长连接，如果需要数据库长连接，需要最后加一个参数：array(PDO::ATTR_PERSISTENT =&amp;gt; true) 变成这样：
$db = new PDO($dsn, $user, $pass, array(PDO::ATTR_PERSISTENT =&amp;gt; true));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其他教程可以点击这里查看&lt;a href=&quot;http://rmingwang.com/pdo-tutorial-for-mysql-developers.html&quot;&gt;点我&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 29 Oct 2015 13:00:47 +0800</pubDate>
        <link>https://wtydreamt.github.io/posts/welcome-to-wty029/</link>
        <guid isPermaLink="true">https://wtydreamt.github.io/posts/welcome-to-wty029/</guid>
        
        <category>msyql</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
